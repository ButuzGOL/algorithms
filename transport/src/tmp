fn task_00() {
  let data = [[1, 3, 2, 4], [2, 1, 4, 3], [3, 5, 6, 1]];
  let production_place = [35, 50, 15];
  let production_move = [30, 10, 20, 40];
  
  // Steps
  let closed = is_closed(production_place, production_move);
  println!("Closed: {:?}", closed);
  
  let send_list = get_send_list_min_price(data, production_place, production_move);
  println!("Send list {:?}", send_list);

  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  println!("get_price {}", get_price(data, send_list));
  
  let corners = get_corners(data, send_list, u_line, v_line);
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));
  
  // Cycle 2
  println!("Cycle 2");    
  get_matrix_indexes(corners, send_list);
  let matrix_indexes = [[1, 0], [0, 0], [0, 2], [1, 2]];
  
  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);  
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  let price = get_price(data, send_list);
  println!("Price {:#?}", price);

  assert_eq!(price, 185, "Error result");
}

fn task_0() {
  // Data
  let data = [[2, 4, 1, 6], [2, 2, 4, 3], [1, 2, 3, 2]];
  let production_place = [70, 80, 50];
  let production_move = [40, 60, 25, 75];

  // Steps
  let closed = is_closed(production_place, production_move);
  println!("Closed: {:?}", closed);
  
  let send_list = get_send_list_min_price(data, production_place, production_move);
  println!("Send list {:?}", send_list);

  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  println!("get_price {}", get_price(data, send_list));
  
  let corners = get_corners(data, send_list, u_line, v_line);
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));
  
  // Cycle 2
  println!("Cycle 2");
  get_matrix_indexes(corners, send_list);
  // [
  //   [0+, 0, 25, 45-], 
  //   [0, 60, 0, 20],
  //   [40-, 0, 0, 10+]
  // ]
  let matrix_indexes = [[0, 0], [0, 3], [2, 3], [2, 0]];

  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);  
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));
  
  // Cycle 3
  println!("Cycle 3");
  get_matrix_indexes(corners, send_list);
  // [
  //   [40, 0-, 25, 5+],
  //   [0, 60+, 0, 20-],
  //   [0, 0, 0, 50],
  // ]
  let matrix_indexes = [[0, 1], [0, 3], [1, 3], [1, 1]];
  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  let price = get_price(data, send_list);
  println!("Price {:#?}", price);

  assert_eq!(price, 410, "Error result");
}

fn task_1() {
  // Data
  // let data = [[1, 3, 2, 4], [2, 1, 4, 3], [3, 5, 6, 1]];
  // let production_place = [35, 50, 15];
  // let production_move = [30, 10, 20, 40];
  let data = [[2, 4, 1, 6], [2, 2, 4, 3], [1, 2, 3, 2]];
  let production_place = [50, 20, 30];
  let production_move = [30, 10, 25, 35];

  // Steps
  let closed = is_closed(production_place, production_move);
  println!("Closed: {:?}", closed);
  
  let send_list = get_send_list_diagonal(data, production_place, production_move);
  println!("Send list {:?}", send_list);

  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  println!("get_price {}", get_price(data, send_list));
  
  let corners = get_corners(data, send_list, u_line, v_line);
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));
  
  // Cycle 2
  println!("Cycle 2");
  get_matrix_indexes(corners, send_list);
  // [
  //   [30, 10-, 10+, 0],
  //   [0, 0+, 15-, 5],
  //   [0, 0, 0, 30]
  // ]
  let matrix_indexes = [[1, 1], [0, 1], [0, 2], [1, 2]];

  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);  
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));

  // Cycle 3
  println!("Cycle 3");
  get_matrix_indexes(corners, send_list);
  // [
  //   [30-, 0, 20+, 0],
  //   [0+, 10, 5-, 5],
  //   [0, 0, 0, 30]
  // ]
  let matrix_indexes = [[1, 0], [0, 0], [0, 2], [1, 2]];

  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);  
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  let price = get_price(data, send_list);
  println!("Price {:#?}", price);
  
  assert_eq!(price, 180, "Error result");
}

fn task_2() {
  let data = [[4, 3, 5], [8, 7, 6], [4, 5, 9], [10, 9, 7]];
  let production_place = [60, 70, 30, 70];
  let production_move = [90, 90, 50];

  // Steps
  let closed = is_closed(production_place, production_move);
  println!("Closed: {:?}", closed);
  
  let send_list = get_send_list_min_price(data, production_place, production_move);
  println!("Send list {:?}", send_list);

  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  println!("get_price {}", get_price(data, send_list));
  
  let corners = get_corners(data, send_list, u_line, v_line);
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));

  // Cycle 2
  println!("Cycle 2");
  get_matrix_indexes(corners, send_list);
  // [
  //   [0, 60, 0],
  //   [0, 20+, 50-],
  //   [30, 0, 0],
  //   [60, 10-, 0+]
  // ]
  let matrix_indexes = [[3, 2], [3, 1], [1, 1], [1, 2]];

  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);  
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));

  // Cycle 2
  println!("Cycle 3");
  get_matrix_indexes(corners, send_list);
  // [
  //   [0+, 60-, 0], 
  //   [0, 30+, 40-],
  //   [30, 0, 0],
  //   [60-, 0, 10+]
  // ]    
  let matrix_indexes = [[0, 0], [0, 1], [1, 1], [1, 2], [3, 2], [3, 0]];

  let send_list = get_new_send_list(matrix_indexes, send_list);
  println!("Send list {:?}", send_list);
  let (u_line, v_line) = get_uv_lines(send_list, data);
  println!("U line {:?}", u_line);
  println!("V line {:?}", v_line);
  
  println!("get_uv_lines_price {}", get_uv_lines_price(u_line, v_line, production_place, production_move));
  // println!("get_price {}", get_price(data, send_list));
  let corners = get_corners(data, send_list, u_line, v_line);  
  println!("Corners {:?}", corners);
  let optimal = is_optimal(corners);
  println!("Optimal {:#?}", optimal);
  println!("Price {:#?}", get_price(data, send_list));

  let price = get_price(data, send_list);
  println!("Price {:#?}", price);
  
  assert_eq!(price, 1380, "Error result");
}